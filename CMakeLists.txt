# Pre-requisites about cmake itself
CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

if(COMMAND cmake_policy)
  cmake_policy(SET CMP0005 NEW) 
  cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)
# MAC OSX RPATH
SET(CMAKE_MACOSX_RPATH true)

# The project name
PROJECT(vision)
set(PLUGIN_NAME "wolf${PROJECT_NAME}")

MESSAGE("Starting ${PROJECT_NAME} CMakeLists ...")

# Paths
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)
set(INCLUDE_INSTALL_DIR include/iri-algorithms/wolf)
set(LIB_INSTALL_DIR lib/)

IF (NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "DEBUG")
ENDIF (NOT CMAKE_BUILD_TYPE)
message(STATUS "Configured to compile in ${CMAKE_BUILD_TYPE} mode.")

#Set Flags
SET(CMAKE_CXX_FLAGS_DEBUG "-g -Wall -D_REENTRANT")
SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -D_REENTRANT")

#Set compiler according C++14 support
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++14" COMPILER_SUPPORTS_CXX14)
if(COMPILER_SUPPORTS_CXX14)
		message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has C++14 support.")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
else()
  message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++14 support. Please use a different C++ compiler.")
endif()

if(UNIX)
  # GCC is not strict enough by default, so enable most of the warnings.
  set(CMAKE_CXX_FLAGS
    "${CMAKE_CXX_FLAGS} -Werror=all -Werror=extra -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers")
endif(UNIX)


IF(NOT BUILD_TESTS)
  OPTION(BUILD_TESTS "Build Unit tests" ON)
ENDIF(NOT BUILD_TESTS)

IF(NOT BUILD_DEMOS)
  OPTION(BUILD_DEMOS "Build Demos" OFF)
ENDIF(NOT BUILD_DEMOS)

IF(NOT BUILD_DOC)
  OPTION(BUILD_DOC "Build Documentation" OFF)
ENDIF(NOT BUILD_DOC)

#############
## Testing ##
#############
#
if(BUILD_TESTS)
    # Enables testing for this directory and below.
    # Note that ctest expects to find a test file in the build directory root.
    # Therefore, this command should be in the source directory root.
    #include(CTest) # according to http://public.kitware.com/pipermail/cmake/2012-June/050853.html
    enable_testing()
endif()

#CMAKE modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake_modules")
MESSAGE(STATUS ${CMAKE_MODULE_PATH})

# Some wolf compilation options
IF((CMAKE_BUILD_TYPE MATCHES DEBUG) OR (CMAKE_BUILD_TYPE MATCHES debug) OR (CMAKE_BUILD_TYPE MATCHES Debug))
  set(_WOLF_DEBUG true)
ENDIF()

option(_WOLF_TRACE "Enable wolf tracing macro" ON)

# ============ DEPENDENCIES ==================
FIND_PACKAGE(wolfcore REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED 
  COMPONENTS core imgcodecs highgui features2d calib3d video
)


# ============ config.h ==================
string(TOUPPER ${PROJECT_NAME} UPPER_NAME)
set(_WOLF_ROOT_DIR ${CMAKE_SOURCE_DIR})

# Define the directory where will be the configured config.h
SET(WOLF_CONFIG_DIR ${PROJECT_BINARY_DIR}/conf/${PROJECT_NAME}/internal)

# Create the specified output directory if it does not exist.
IF(NOT EXISTS "${WOLF_CONFIG_DIR}")
  message(STATUS "Creating config output directory: ${WOLF_CONFIG_DIR}")
  file(MAKE_DIRECTORY "${WOLF_CONFIG_DIR}")
ENDIF()
IF(EXISTS "${WOLF_CONFIG_DIR}" AND NOT IS_DIRECTORY "${WOLF_CONFIG_DIR}")
  message(FATAL_ERROR "Bug: Specified CONFIG_DIR: "
    "${WOLF_CONFIG_DIR} exists, but is not a directory.")
ENDIF()
# Configure config.h
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/internal/config.h.in "${WOLF_CONFIG_DIR}/config.h")
message("CONFIG DIRECTORY ${PROJECT_BINARY_DIR}")
include_directories("${PROJECT_BINARY_DIR}/conf")

# ============ INCLUDES ==================
INCLUDE_DIRECTORIES(BEFORE "include")

# ============ HEADERS ============ 
SET(HDRS_CAPTURE
include/vision/capture/capture_image.h
  )
SET(HDRS_FACTOR
# include/vision/factor/factor_trifocal.h
# include/vision/factor/factor_ahp.h
include/vision/factor/factor_pixel_hp.h
# include/vision/factor/factor_epipolar.h
  )
SET(HDRS_FEATURE
include/vision/feature/feature_point_image.h
  )
SET(HDRS_LANDMARK
  # include/vision/landmark/landmark_ahp.h
  include/vision/landmark/landmark_hp.h
  include/vision/landmark/landmark_point_3d.h
  )
SET(HDRS_MATH
include/vision/math/pinhole_tools.h
  )
SET(HDRS_PROCESSOR
include/vision/processor/processor_visual_odometry.h
include/vision/processor/active_search.h
  )
SET(HDRS_SENSOR
include/vision/sensor/sensor_camera.h
  )

# ============ SOURCES ============ 
SET(SRCS_CAPTURE
src/capture/capture_image.cpp
  )
SET(SRCS_FEATURE
src/feature/feature_point_image.cpp
  )
SET(SRCS_LANDMARK
# src/landmark/landmark_ahp.cpp
src/landmark/landmark_hp.cpp
src/landmark/landmark_point_3d.cpp
  )
SET(SRCS_PROCESSOR
src/processor/processor_visual_odometry.cpp
src/processor/active_search.cpp
  )
SET(SRCS_SENSOR
src/sensor/sensor_camera.cpp
  )
SET(SRCS_YAML
)

# create the shared library
ADD_LIBRARY(${PLUGIN_NAME}
  SHARED
  ${SRCS_CAPTURE}
  ${SRCS_FEATURE}
  ${SRCS_LANDMARK}
  ${SRCS_PROCESSOR}
  ${SRCS_SENSOR}
  ${SRCS_YAML}
  )
  
# Set compiler options
# ====================
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  message(STATUS "Using C++ compiler clang")
  target_compile_options(${PLUGIN_NAME} PRIVATE -Winconsistent-missing-override)
  # using Clang
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  message(STATUS "Using C++ compiler gnu")
  target_compile_options(${PLUGIN_NAME} PRIVATE -Wsuggest-override)
  # using GCC
endif()

# Link the created libraries
#===============EXAMPLE=========================
TARGET_LINK_LIBRARIES(${PLUGIN_NAME} wolfcore)
# For OpenCV, link with respect to each required components, found in the find_package command
# The required components have the same name as the include files e.g. <opencv2/core.hpp>
# or the opencv2 subdirectory in which they are found, e.g. <opencv2/video/tracking.hpp>
TARGET_LINK_LIBRARIES(${PLUGIN_NAME} 
  opencv_core
  opencv_imgcodecs
  opencv_highgui
  opencv_features2d
  opencv_calib3d
  opencv_video
)

#Build demos
#===============EXAMPLE=========================
IF(BUILD_DEMOS)
  MESSAGE(STATUS "Building demos.")
  add_subdirectory(demos)
ENDIF(BUILD_DEMOS)

#Build tests
#===============EXAMPLE=========================
IF(BUILD_TESTS)
  MESSAGE(STATUS "Building tests.")
  add_subdirectory(test)
ENDIF(BUILD_TESTS)

#install library
#=============================================================
INSTALL(TARGETS ${PLUGIN_NAME} EXPORT ${PLUGIN_NAME}Targets
      RUNTIME DESTINATION bin
      LIBRARY DESTINATION lib
      ARCHIVE DESTINATION lib)

#Â Configure the package installation
include(CMakePackageConfigHelpers)
configure_package_config_file(
  ${CMAKE_SOURCE_DIR}/cmake_modules/${PLUGIN_NAME}Config.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/${PLUGIN_NAME}Config.cmake
  INSTALL_DESTINATION ${LIB_INSTALL_DIR}/${PLUGIN_NAME}/cmake
  PATH_VARS INCLUDE_INSTALL_DIR LIB_INSTALL_DIR
)

install(
  FILES 
  ${CMAKE_CURRENT_BINARY_DIR}/${PLUGIN_NAME}Config.cmake
  DESTINATION 
  ${LIB_INSTALL_DIR}/${PLUGIN_NAME}/cmake
)

# Specifies include directories to use when compiling the plugin target
# This way, include_directories does not need to be called in plugins depending on this one
target_include_directories(${PLUGIN_NAME} INTERFACE
  $<INSTALL_INTERFACE:${INCLUDE_INSTALL_DIR}>
)


#install headers
INSTALL(FILES ${HDRS_CAPTURE}
  DESTINATION ${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}/capture)
INSTALL(FILES ${HDRS_FACTOR}
  DESTINATION ${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}/factor)
INSTALL(FILES ${HDRS_FEATURE}
  DESTINATION ${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}/feature)
INSTALL(FILES ${HDRS_LANDMARK}
  DESTINATION ${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}/landmark)
INSTALL(FILES ${HDRS_MATH}
  DESTINATION ${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}/math)
INSTALL(FILES ${HDRS_PROCESSOR}
  DESTINATION ${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}/processor)
INSTALL(FILES ${HDRS_SENSOR}
  DESTINATION ${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}/sensor)

INSTALL(FILES "${WOLF_CONFIG_DIR}/config.h"
  DESTINATION ${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}/internal)

INSTALL(DIRECTORY ${SPDLOG_INCLUDE_DIRS} DESTINATION "include/iri-algorithms/")

export(PACKAGE ${PLUGIN_NAME})

FIND_PACKAGE(Doxygen)

FIND_PATH(IRI_DOC_DIR doxygen.conf ${CMAKE_SOURCE_DIR}/doc/iri_doc/)
IF (IRI_DOC_DIR)
  ADD_CUSTOM_TARGET (doc ${DOXYGEN_EXECUTABLE} ${CMAKE_SOURCE_DIR}/doc/iri_doc/doxygen.conf)
ELSE (IRI_DOC_DIR)
  ADD_CUSTOM_TARGET (doc ${DOXYGEN_EXECUTABLE} ${CMAKE_SOURCE_DIR}/doc/doxygen.conf)
ENDIF (IRI_DOC_DIR)

ADD_CUSTOM_TARGET (distclean @echo cleaning cmake files)

IF (UNIX)
  ADD_CUSTOM_COMMAND(
    COMMENT "distribution clean"
    COMMAND make ARGS clean
    COMMAND rm ARGS -rf ${CMAKE_SOURCE_DIR}/build/*

    TARGET  distclean
  )
ELSE(UNIX)
  ADD_CUSTOM_COMMAND(
    COMMENT "distclean only implemented in unix"
    TARGET  distclean
  )
ENDIF(UNIX)

ADD_CUSTOM_TARGET (uninstall @echo uninstall package)

IF (UNIX)
  ADD_CUSTOM_COMMAND(
    COMMENT "uninstall package"
    COMMAND xargs ARGS rm < install_manifest.txt

    TARGET  uninstall
  )
ELSE(UNIX)
  ADD_CUSTOM_COMMAND(
    COMMENT "uninstall only implemented in unix"
    TARGET  uninstall
  )
ENDIF(UNIX)
